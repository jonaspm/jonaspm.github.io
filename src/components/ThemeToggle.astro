---
// ThemeToggle component for dark/light theme switching
---

<button 
  id="theme-toggle" 
  class="flex items-center justify-center w-10 h-10 rounded-lg bg-grayblue-100 dark:bg-grayblue-700 text-grayblue-700 dark:text-grayblue-200 hover:bg-grayblue-200 dark:hover:bg-grayblue-600 transition-all duration-300 ease-in-out focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 dark:focus:ring-offset-grayblue-800"
  aria-label="Toggle theme"
  title="Toggle theme"
>
  <span class="material-symbols-rounded text-xl transition-transform duration-300" id="theme-icon">
    light_mode
  </span>
</button>

<script>
  // Extend Window interface to include themeManagerInstance
  // @ts-ignore
  declare global {
    interface Window {
      themeManagerInstance?: ThemeManager;
    }
  }

  // Theme management functionality
  class ThemeManager {
    storageKey = 'theme-preference';
    
    constructor() {
      this.init();
    }
    
    init() {
      // Get initial theme from localStorage or system preference
      const savedTheme = localStorage.getItem(this.storageKey);
      const systemPrefersDark = window.matchMedia('(prefers-color-scheme: dark)').matches;
      
      const initialTheme = savedTheme || (systemPrefersDark ? 'dark' : 'light');
      this.setTheme(initialTheme);
      
      // Listen for theme toggle clicks on ALL theme toggle buttons
      const themeToggles = document.querySelectorAll('[id="theme-toggle"]');
      themeToggles.forEach(toggle => {
        toggle.addEventListener('click', () => this.toggleTheme());
      });
      
      // Listen for system theme changes
      window.matchMedia('(prefers-color-scheme: dark)')
        .addEventListener('change', (e) => {
          if (!localStorage.getItem(this.storageKey)) {
            this.setTheme(e.matches ? 'dark' : 'light');
          }
        });
    }
    
    toggleTheme() {
      console.log('Toggling theme...');
      const currentTheme = document.documentElement.classList.contains('dark') ? 'dark' : 'light';
      const newTheme = currentTheme === 'dark' ? 'light' : 'dark';
      
      // Add rotation animation to all theme icons
      const themeIcons = document.querySelectorAll('[id="theme-icon"]');
      themeIcons.forEach(icon => {
        icon.classList.add('theme-icon-rotate');
        
        // Remove animation class after animation completes
        setTimeout(() => {
          icon.classList.remove('theme-icon-rotate');
        }, 300);
      });
      
      this.setTheme(newTheme);
      localStorage.setItem(this.storageKey, newTheme);
    }
    
    setTheme(theme) {
      const root = document.documentElement;
      const themeIcons = document.querySelectorAll('[id="theme-icon"]');
      
      if (theme === 'dark') {
        root.classList.add('dark');
        themeIcons.forEach(icon => {
          icon.textContent = 'dark_mode';
        });
      } else {
        root.classList.remove('dark');
        themeIcons.forEach(icon => {
          icon.textContent = 'light_mode';
        });
      }
      
      // Dispatch custom event for other components to listen to
      window.dispatchEvent(new CustomEvent('theme-changed', { 
        detail: { theme } 
      }));
    }
  }
  
  // Initialize theme manager only once
  function initThemeManager() {
    if (!window.themeManagerInstance) {
      window.themeManagerInstance = new ThemeManager();
    }
  }
  
  // Initialize on page navigation (for Astro's client-side routing)
  document.addEventListener('astro:page-load', initThemeManager);

  // Initialize on initial page load
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initThemeManager);
  } else {
    initThemeManager();
  }
</script>
